{"version":3,"sources":["logo.svg","app/config/axios.js","app/components/Sites/site.api.js","app/components/Sites/site.component.js","app/components/Main/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axiosInstance","axios","create","baseURL","transformRequest","data","headers","transformResponse","withCredentials","timeout","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","progressEvent","onDownloadProgress","maxContentLength","interceptors","request","use","config","console","log","error","Promise","reject","response","siteApi","getAll","page","get","params","then","catch","message","getOne","id","SiteComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showAllSites","setState","sites","state","bind","assertThisInitialized","react_default","a","createElement","className","React","Component","App","site_component","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","components_Main_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iUCGlCC,SAAgBC,EAAMC,OAAO,CAE/BC,QAAS,oFAMTC,iBAAkB,CAAC,SAAUC,EAAMC,GAE/B,OAAOD,IAKXE,kBAAmB,CAAC,SAAUF,GAG1B,OAAOA,IAIXG,iBAAiB,EAGjBC,QAAS,IAITC,aAAc,OAGdC,eAAgB,aAGhBC,eAAgB,eAGhBC,iBAAkB,SAAUC,KAK5BC,mBAAoB,SAAUD,KAK9BE,iBAAkB,MAKlBhB,EAAciB,aAAaC,QAAQC,IAAI,SAAUC,GAG7C,OADAC,QAAQC,IAAI,uCACLF,GACR,SAAUG,GAET,OAAOC,QAAQC,OAAOF,KAI1BvB,EAAciB,aAAaS,SAASP,IAAI,SAAUO,GAG9C,OADAL,QAAQC,IAAI,mCACLI,GACR,SAAUH,GAET,OAAOC,QAAQC,OAAOF,KAGfvB,QChCA2B,EAzCD,CACVC,OAAQ,SAACC,GACL,OAAO7B,EAAc8B,IAAI9B,EAAcG,QAAS,CAC5C4B,OAAQ,CACJF,KAAMA,KAEXG,KAAK,SAAUN,GACd,OAAOA,IACRO,MAAM,SAAUV,GACf,OAAIA,EAAMG,SAECH,EACAA,EAAML,QAENK,EAAML,QAGNK,EAAMW,WAKzBC,OAAQ,SAACC,GACL,OAAOpC,EAAc8B,IAAI,WAAY,IAClCE,KAAK,SAAUN,GACd,OAAOA,IACRO,MAAM,SAAUV,GACf,OAAIA,EAAMG,SAECH,EACAA,EAAML,QAENK,EAAML,QAGNK,EAAMW,YCCdG,cAhCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,aAAe,WACbnB,EAAQC,OAAO,GAAGI,KAAK,SAAAN,GACjBA,EAASrB,MACZgB,QAAQC,IAAII,EAASrB,MACrBkC,EAAKQ,SAAS,CAACC,MAAOtB,EAASrB,QAE9BgB,QAAQC,IAAII,MAZhBa,EAAKU,MAAQ,CACXD,MAAO,IAETT,EAAKO,aAAeP,EAAKO,aAAaI,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KALHA,mFAoBjBG,KAAKI,gDAIL,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,wBA1BsBC,IAAMC,WCgBnBC,mLAdX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzCV,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,iCAPQG,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.d07becca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\n\r\n// Set config defaults when creating the instance\r\nconst axiosInstance = axios.create({\r\n    // url: '/users',\r\n    baseURL: 'http://winnova-lb-593685308.eu-west-1.elb.amazonaws.com/hallinta/api/v1/companies',\r\n    // `transformRequest` allows changes to the request data before it is sent to the server\r\n    // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\r\n    // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\r\n    // FormData or Stream\r\n    // You may modify the headers object.\r\n    transformRequest: [function (data, headers) {\r\n        // Do whatever you want to transform the data\r\n        return data;\r\n    }],\r\n\r\n    // `transformResponse` allows changes to the response data to be made before\r\n    // it is passed to then/catch\r\n    transformResponse: [function (data) {\r\n        // Do whatever you want to transform the data\r\n\r\n        return data;\r\n    }],\r\n    // `withCredentials` indicates whether or not cross-site Access-Control requests\r\n    // should be made using credentials\r\n    withCredentials: false, // default,\r\n    // `timeout` specifies the number of milliseconds before the request times out.\r\n    // If the request takes longer than `timeout`, the request will be aborted.\r\n    timeout: 1000,\r\n\r\n    // `responseType` indicates the type of data that the server will respond with\r\n    // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\r\n    responseType: 'json', // default\r\n\r\n    // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\r\n    xsrfCookieName: 'XSRF-TOKEN', // default\r\n\r\n    // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\r\n    xsrfHeaderName: 'X-XSRF-TOKEN', // default\r\n\r\n    // `onUploadProgress` allows handling of progress events for uploads\r\n    onUploadProgress: function (progressEvent) {\r\n        // Do whatever you want with the native progress event\r\n    },\r\n\r\n    // `onDownloadProgress` allows handling of progress events for downloads\r\n    onDownloadProgress: function (progressEvent) {\r\n        // Do whatever you want with the native progress event\r\n    },\r\n\r\n    // `maxContentLength` defines the max size of the http response content allowed\r\n    maxContentLength: 2000,\r\n});\r\n\r\n\r\n    // Add a request interceptor\r\n    axiosInstance.interceptors.request.use(function (config) {\r\n        // Do something before request is sent\r\n        console.log('Do something before request is sent');\r\n        return config;\r\n    }, function (error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    });\r\n\r\n    // Add a response interceptor\r\n    axiosInstance.interceptors.response.use(function (response) {\r\n        // Do something with response data\r\n        console.log('Do something with response data');\r\n        return response;\r\n    }, function (error) {\r\n        // Do something with response error\r\n        return Promise.reject(error);\r\n    });\r\n\r\nexport default axiosInstance;","import axiosInstance from '../../config/axios';\r\n\r\nlet siteApi = {\r\n    getAll: (page) => {\r\n        return axiosInstance.get(axiosInstance.baseURL, {\r\n            params: {\r\n                page: page,\r\n            }\r\n        }).then(function (response) {\r\n            return response;\r\n        }).catch(function (error) {\r\n            if (error.response) {\r\n                // The request was made and the server responded with a status code\r\n                return error;\r\n            } else if (error.request) {\r\n                // The request was made but no response was received\r\n                return error.request;\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                return error.message;\r\n            }\r\n        });\r\n    },\r\n\r\n    getOne: (id) => {\r\n        return axiosInstance.get('endpoint', {\r\n        }).then(function (response) {\r\n            return response;\r\n        }).catch(function (error) {\r\n            if (error.response) {\r\n                // The request was made and the server responded with a status code\r\n                return error;\r\n            } else if (error.request) {\r\n                // The request was made but no response was received\r\n                return error.request;\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                return error.message;\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nexport default siteApi;","import React from 'react';\nimport './site.style.scss';\n\nimport siteApi from './site.api';\n\nclass SiteComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sites: [],\n    };\n    this.showAllSites = this.showAllSites.bind(this)\n  }\n\n  showAllSites = () => {\n    siteApi.getAll(1).then(response => {\n      if (response.data) {\n       console.log(response.data);\n       this.setState({sites: response.data})\n      } else {\n        console.log(response);\n      }\n    });\n  };\n\n  componentDidMount() {\n    this.showAllSites();\n  }\n\n  render() {\n    return (\n      <div className=\"SiteComponent\">\n        SiteComponent\n      </div>\n    );\n  }\n}\n\nexport default SiteComponent;\n","import React, { Component } from 'react';\nimport logo from '../../../logo.svg';\nimport './App.scss';\nimport SiteComponent from \"../Sites/site.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"AppComponent\">\n        <SiteComponent/>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/assets/styles/index.scss';\nimport App from './app/components/Main/App';\nimport * as serviceWorker from './serviceWorker';\nimport './app/assets/styles/custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}